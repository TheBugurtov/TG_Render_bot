import os
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
import csv
import io
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CSV_URL = "https://raw.githubusercontent.com/TheBugurtov/Figma-components-to-Google-Sheets/main/components.csv"

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")],
        [KeyboardButton(text="–ò–∑—É—á–∏—Ç—å –≥–∞–π–¥—ã"), KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø"), KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

# --- FSM ---
class SearchFlow(StatesGroup):
    input_query = State()

# --- –ö—ç—à CSV ---
component_cache = None
last_fetch_time = 0
CACHE_TTL = 5 * 60  # 5 –º–∏–Ω—É—Ç

async def get_component_data():
    global component_cache, last_fetch_time
    now = time.time()

    if component_cache and now - last_fetch_time < CACHE_TTL:
        return component_cache

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CSV_URL) as resp:
                if resp.status != 200:
                    raise Exception(f"HTTP error: {resp.status}")
                csv_text = await resp.text()
                reader = csv.DictReader(io.StringIO(csv_text))
                component_cache = list(reader)
                last_fetch_time = now
                print("CSV –æ–±–Ω–æ–≤–ª–µ–Ω")
                return component_cache
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV:", e)
        return component_cache or []

async def search_components(query, type_):
    records = await get_component_data()
    if not records:
        return []

    q = (query or "").lower().strip()
    filtered = []

    for r in records:
        tags = (r.get("Tags", "") or "").lower().replace(" ", "").split(",")
        if any(q in tag for tag in tags):
            if type_ == "mobile" and r["File"].strip() == "App Components":
                filtered.append(r)
            elif type_ == "web" and r["File"].strip() != "App Components":
                filtered.append(r)

    return filtered

async def send_large_message(chat_id: int, text: str, delay: float = 0.5):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    max_length = 4000
    parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
    
    for part in parts:
        await bot.send_message(chat_id, part)
        if len(parts) > 1:
            await asyncio.sleep(delay)

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã.", reply_markup=main_menu)

@dp.message(lambda msg: msg.text and msg.text.lower() == "–Ω–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
async def search_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(SearchFlow.input_query)

@dp.message(SearchFlow.input_query)
async def process_search(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_menu)
        return

    # –ò—â–µ–º –≤ –≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    results = await search_components(message.text, "web")
    
    if not results:
        await message.answer(
            f'–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{message.text}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    formatted = [
        f"‚ñ™Ô∏è <b>{r['Component']}</b> ({r['File']})\nüîó {r['Link']}"
        for r in results
    ]
    
    await send_large_message(
        message.chat.id,
        f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:\n\n" + "\n\n".join(formatted)
    )
    
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è) ---
async def send_info_message(message: types.Message, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await send_large_message(message.chat.id, text)

@dp.message(lambda msg: msg.text and msg.text.lower() == "–∏–∑—É—á–∏—Ç—å –≥–∞–π–¥—ã")
async def guides(message: types.Message):
    await send_info_message(message, """
<b>–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∞–≤–∏–ª –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã:</b>
<a href="https://www.figma.com/design/5ZYTwB6jw2wutqg60sc4Ff/Granat-Guides-WIP?node-id=181-20673">Granat Guides</a>

<b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ <a href="https://www.figma.com/design/5ZYTwB6jw2wutqg60sc4Ff/Granat-Guides-WIP?node-id=313-8196">–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞</a>
‚Ä¢ <a href="https://www.figma.com/design/iqTCxAPRJJm6UlANLlYfva/Variables?node-id=48097-1187">–¶–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–º—ã</a>
‚Ä¢ <a href="https://www.figma.com/design/a3nZmvTc8B9cZcrke9goCE/Icons?node-id=547-206394">–ò–∫–æ–Ω–∫–∏</a>
""")

@dp.message(lambda msg: msg.text and msg.text.lower() == "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É")
async def suggest(message: types.Message):
    await send_info_message(message, """
<b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É:</b>
–û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –≤ <a href="https://gitlab.services.mts.ru/digital-products/design-system/support/design/-/issues/new">GitLab</a>

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
1. –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
2. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Å—Å—ã–ª–∫–∏
3. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
""")

@dp.message(lambda msg: msg.text and msg.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø")
async def add_icon(message: types.Message):
    await send_info_message(message, """
<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫:</b>
1. –î–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ - <a href="https://gitlab.services.mts.ru/digital-products/design-system/support/design/-/issues/new">–æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</a>
2. –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∏–∫–æ–Ω–æ–∫ - —Å–æ–≥–ª–∞—Å—É–π—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º
3. –õ–æ–≥–æ—Ç–∏–ø—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <a href="https://www.figma.com/design/a3nZmvTc8B9cZcrke9goCE/Icons?node-id=29711-16375">—à–∞–±–ª–æ–Ω—ã</a>
""")

@dp.message(lambda msg: msg.text and msg.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
async def changes(message: types.Message):
    await send_info_message(message, """
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - 15.08.2023
‚Ä¢ –ù–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏ - 10.08.2023
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤ - 05.08.2023

–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://t.me/c/1397080567/12194
""")

@dp.message(lambda msg: msg.text and msg.text.lower() == "–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await send_info_message(message, """
<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã:</b>
1. <a href="https://t.me/+90sy0C1fFPwzNTY6">Telegram-—á–∞—Ç</a>
2. Email: kuskova@mts.ru
3. –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

–ü–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç–∞ –≤ <a href="https://www.figma.com/design/5ZYTwB6jw2wutqg60sc4Ff/Granat-Guides-WIP?node-id=181-20673">–≥–∞–π–¥–∞—Ö</a>
""")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())